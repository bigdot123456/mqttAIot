package main

import (
	"fmt"
	"github.com/fsnotify/fsnotify"
	"github.com/jeek120/cpuid"
	"github.com/spf13/viper"
	"log"
	"os"
)

type AutoGenerated struct {
	Title  string `toml:"title"`
	Server struct {
		IP      string `toml:"IP"`
		Port        int    `toml:"port"`
		ConnectionMax int    `toml:"connection_max"`
	} `toml:"server"`
	Client struct {
		Username string `toml:"username"`
		Passwd   string `toml:"passwd"`
		Topic    string `toml:"topic"`
	} `toml:"client"`
	Mysql struct {
		IP     string `toml:"ip"`
		Port   int    `toml:"port"`
		Name   string `toml:"name"`
		Passwd string `toml:"passwd"`
	} `toml:"mysql"`
}

func init() {
	path, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	viper.AddConfigPath(path + "/config")
	viper.SetConfigName("config") //指定配置文件的文件名称(不需要制定配置文件的扩展名)
	//viper.AddConfigPath("/etc/appname/")   //设置配置文件的搜索目录
	//viper.AddConfigPath("$HOME/.appname")  // 设置配置文件的搜索目录
	viper.AddConfigPath(".")    // 设置配置文件和可执行二进制文件在用一个目录
	err = viper.ReadInConfig() // 根据以上配置读取加载配置文件
	if err != nil {
		log.Fatal(err)// 读取配置文件失败致命错误
	}
	viper.WatchConfig()
	viper.OnConfigChange(func(e fsnotify.Event) {
		//viper配置发生变化了 执行响应的操作
		fmt.Println("Config file changed:", e.Name)
	})
	viper.SetDefault("Server.IP", "127.0.0.1")
	viper.SetDefault("Server.port", 1883)
	viper.SetDefault("LayoutDir", "layouts")
	viper.SetDefault("Taxonomies", map[string]string{"tag": "tags", "category": "categories"})
}

func getCPUIDStr() string{
	ids := [4]uint32{}
	cpuid.Cpuid(&ids, 0)
	//fmt.Printf("%d%d%d%d", ids[0], ids[1], ids[2], ids[3])
	cpustr:=fmt.Sprintf("%d%d%d%d", ids[0], ids[1], ids[2], ids[3])
	return cpustr
}